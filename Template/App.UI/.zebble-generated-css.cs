/***********************************************
* GENERATED BY ZEBBLE
***********************************************/

using System;
using Zebble;
using Zebble.Services;
using Zebble.Plugin;
using Zebble.Device;
using UI.Modules;
using UI.Pages;
using UI.Templates;
using System.Threading.Tasks;

namespace UI
{
    [EscapeGCop("Auto-generated")]
    public class CssStyles
    {
        public static void LoadAll()
        {
            // ======================================================================
            // App.UI\Styles\Android.css---------------------------------------------

            if (CssEngine.Platform == DevicePlatform.Android)
            {
                CssEngine.Add(new File_App.UI.Styles.Android.TextInputCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TextViewCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.ButtonCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.IconButtonCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.IconButtonTextViewCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.PopUpDialogCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.PopUpPageCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.ModuleHeaderTitleCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.NavigationBarTitleCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TextInput_1CssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.ListViewCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.ListViewListViewItemCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.ListViewListViewItemImageViewViewRowCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TabsCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TabsTabsTabCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TabsTabsTabActiveCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TabsTabsTabLabelCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TabsTabsTabIconCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.SwitchCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.SwitchBarCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.SwitchToggleCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.SwitchCheckedToggleCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.SwitchCheckedBarCssRule());
            }

            // ======================================================================
            // App.UI\Styles\Common.css----------------------------------------------
            CssEngine.Add(new File_App.UI.Styles.Common.TextInputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextInputSkeletonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextInputActiveCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CheckBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CheckBoxCheckedCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CheckBoxCheckedImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IconButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IconButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IconButtonIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchInputIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchInputTextBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchInputCancelButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchInputFocusTextBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchInputFocusCancelButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SwitchCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SwitchBarCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SwitchToggleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FormFieldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FormFieldLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FormFieldIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DialogCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DialogTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DialogButtonsRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PromptDescriptionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PromptInputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.AlertDialogMessageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopUpCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopupOverlayCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WaitingOverlayCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WaitingOverlay_1CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastOKButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.GridEmptyTextLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewEmptyTextLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewLazyLoadedOptionsListOptionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavBarPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavBarPageBodyScrollerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavBarPageBodyScrollerBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WaitSpinnerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WaitSpinnerImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.RefreshingIndicatorCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsTabsTabCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsTabsTabIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsTabsTabLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerCellCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TimePickerCellCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerCellLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TimePickerCellLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerDialogRotatorsRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TimePickerDialogRotatorsRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PickerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PickerLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PickerCaretCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PickerPlaceholderLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SpinnerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SpinnerImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SpinnerSmallCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ActionButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ActionButtonColumnCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ActionButtonTextViewPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ActionButtonTextViewSecondaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PrimaryBgCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MBigCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MTBigCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MBNormalCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MBBigCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ParentCenterCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MutedCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ImageViewLogoCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextViewTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextViewSubTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextViewSeparatorCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.StackInputWrapperCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonLgCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ActionButtonPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ActionButtonPrimaryTextViewPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ActionButtonPrimaryTextViewSecondaryCssRule());

            // ======================================================================
            // App.UI\Styles\iOS.css-------------------------------------------------

            if (CssEngine.Platform == DevicePlatform.IOS)
            {
                CssEngine.Add(new File_App.UI.Styles.IOS.TextInputCssRule());
                CssEngine.Add(new File_App.UI.Styles.IOS.TextViewCssRule());
                CssEngine.Add(new File_App.UI.Styles.IOS.ModuleHeaderTitleCssRule());
                CssEngine.Add(new File_App.UI.Styles.IOS.DialogCssRule());
                CssEngine.Add(new File_App.UI.Styles.IOS.PrimaryButtonCssRule());
            }

            // ======================================================================
            // App.UI\Styles\Windows.css---------------------------------------------

            if (CssEngine.Platform == DevicePlatform.Windows)
            {
                CssEngine.Add(new File_App.UI.Styles.Windows.TextViewCssRule());
                CssEngine.Add(new File_App.UI.Styles.Windows.TextInputCssRule());
                CssEngine.Add(new File_App.UI.Styles.Windows.ModuleHeaderTitleCssRule());
            }
        }
    }
}

// Ensure auto-generated namespaces exist:
namespace UI.Modules { }
namespace UI.Pages { }
namespace UI.Templates { }
namespace Zebble.Plugin { }
namespace Zebble.Data { }

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "TextInput")]
    [CssBody("font-family: Roboto;")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Font.Name = "Roboto";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "TextView")]
    [CssBody("font-family: Roboto;")]
    class TextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Roboto";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Button")]
    [CssBody("text-transform: uppercase; height: 36px; border-radius: 4px;")]
    class ButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Height = 36;
            view.Css.TextTransform = TextTransform.Uppercase;
            view.Css.Border.Radius = 4;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "IconButton")]
    [CssBody("text-transform: uppercase; height: 36px; border-radius: 4px;")]
    class IconButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: IconButton

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.Height = 36;
            view.Css.TextTransform = TextTransform.Uppercase;
            view.Css.Border.Radius = 4;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "IconButton #TextView")]
    [CssBody("text-transform: uppercase;")]
    class IconButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextView

            view = CssEngine.FindParentByType<IconButton>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextTransform = TextTransform.Uppercase;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "PopUp Dialog")]
    [CssBody("border-radius: 4px;")]
    class PopUpDialogCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Dialog

            view = CssEngine.FindParentByType<PopUp>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Dialog)untypedView;
            view.Css.Border.Radius = 4;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "PopUp Page")]
    [CssBody("border-radius: 4px;")]
    class PopUpPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Page

            view = CssEngine.FindParentByType<PopUp>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Page)untypedView;
            view.Css.Border.Radius = 4;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", ".module-header-title")]
    [CssBody("font-size: 26px; margin-top: 10px;")]
    class ModuleHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .module-header-title

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 26;
            view.Css.Margin.Top = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "NavigationBar #Title")]
    [CssBody("text-align: left; padding-left: 65px; font-size: 20px; font-weight: normal; padding-top: 10px;")]
    class NavigationBarTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 20;
            view.Css.Font.Bold = false;
            view.Css.Padding.Left = 65;
            view.Css.Padding.Top = 10;
            view.Css.TextAlignment = Alignment.Left;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "TextInput")]
    [CssBody("font-family: Roboto; border: 0 #e6e6e6; border-bottom-width: 1px; padding: 2px; margin-bottom: 10px;")]
    class TextInput_1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Font.Name = "Roboto";
            view.Css.Padding(2);
            view.Css.Margin.Bottom = 10;
            view.Css.Border = new Border(0, "#e6e6e6");
            view.Css.Border.Bottom = 1;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "ListView")]
    [CssBody("padding-top: 8px;")]
    class ListViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListView

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ListView)untypedView;
            view.Css.Padding.Top = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "ListView ListViewItem")]
    [CssBody("height: 72px; padding-left: 10px; padding-right: 10px;")]
    class ListViewListViewItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListViewItem

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ListViewItem)untypedView;
            view.Css.Height = 72;
            view.Css.Padding.Left = 10;
            view.Css.Padding.Right = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "ListView ListViewItem ImageView.view-row")]
    [CssBody("display: none;")]
    class ListViewListViewItemImageViewViewRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is ImageView && HasClass(view, "view-row"))) return false;

            view = CssEngine.FindParentByType<ListViewItem>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override async Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            await view.Css.IgnoredAsync(true);
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Tabs")]
    [CssBody("height: auto;")]
    class TabsCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Tabs

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Tabs)untypedView;
            view.Css.Height = null;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Tabs Tabs-Tab")]
    [CssBody("border: 0 black; font-size: 14px; margin-bottom: 1px; height: 40px;")]
    class TabsTabsTabCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Tabs-Tab

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Tabs.Tab)untypedView;
            view.Css.Height = 40;
            view.Css.Font.Size = 14;
            view.Css.Margin.Bottom = 1;
            view.Css.Border = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Tabs Tabs-Tab:active")]
    [CssBody("background-color: transparent; border-bottom-width: 2px;")]
    class TabsTabsTabActiveCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Tabs.Tab && view.PseudoCssState.ContainsWholeWord("active"))) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Tabs.Tab)untypedView;
            view.Css.BackgroundColor = Colors.Transparent;
            view.Css.Border.Bottom = 2;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Tabs Tabs-Tab #Label")]
    [CssBody("text-transform: uppercase; height: 100%; vertical-align: middle;")]
    class TabsTabsTabLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.TextTransform = TextTransform.Uppercase;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Tabs Tabs-Tab #Icon")]
    [CssBody("display: none;")]
    class TabsTabsTabIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override async Task Apply(View view)
        {
            await view.Css.IgnoredAsync(true);
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Switch")]
    [CssBody("width: 50px;")]
    class SwitchCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Switch

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Switch)untypedView;
            view.Css.Width = 50;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Switch #Bar")]
    [CssBody("background: #7d7d7d; height: 14px; border-radius: 7px; margin-top: 6px; opacity: 1;")]
    class SwitchBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Bar

            view = CssEngine.FindParentByType<Switch>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 14;
            view.Css.Margin.Top = 6;
            view.Css.BackgroundColor = "#7d7d7d";
            view.Css.Border.Radius = 7;
            view.Css.Opacity = 1f;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Switch #Toggle")]
    [CssBody("background: white; border-width: 1px; border-color: #7d7d7d; margin: 0;")]
    class SwitchToggleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Toggle

            view = CssEngine.FindParentByType<Switch>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(0);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Width = 1;
            view.Css.Border.Color = "#7d7d7d";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Switch:checked #Toggle")]
    [CssBody("background: black; border-color: transparent;")]
    class SwitchCheckedToggleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Toggle

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Switch && view.PseudoCssState.ContainsWholeWord("checked")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Black;
            view.Css.Border.Color = Colors.Transparent;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Switch:checked #Bar")]
    [CssBody("opacity: 0.35; background: black;")]
    class SwitchCheckedBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Bar

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Switch && view.PseudoCssState.ContainsWholeWord("checked")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "TextInput")]
    [CssBody("padding: 10px; border-radius: 20px;")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Padding(10);
            view.Css.Border.Radius = 20;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "TextInput:skeleton")]
    [CssBody("color: #7d7d7d;")]
    class TextInputSkeletonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextInput && view.PseudoCssState.ContainsWholeWord("skeleton"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.TextColor = "#7d7d7d";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "TextInput :active")]
    [CssBody("background-color: red;")]
    class TextInputActiveCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: :active

            view = CssEngine.FindParentByType<TextInput>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Red;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Button")]
    [CssBody("padding: 10px; border-radius: 20px; background: #f0f0f0; color: #6358db;")]
    class ButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Padding(10);
            view.Css.Border.Radius = 20;
            view.Css.BackgroundColor = "#f0f0f0";
            view.Css.TextColor = "#6358db";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "CheckBox")]
    [CssBody("width: 24px; height: 24px; border: 1px solid #aaaaaa; border-radius: 12px; background: transparent;")]
    class CheckBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CheckBox

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CheckBox)untypedView;
            view.Css.Height = 24;
            view.Css.Width = 24;
            view.Css.Border = new Border(1, "#aaaaaa");
            view.Css.Border.Radius = 12;
            view.Css.BackgroundColor = Colors.Transparent;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "CheckBox:checked")]
    [CssBody("background-color: #b8b3fb;")]
    class CheckBoxCheckedCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is CheckBox && view.PseudoCssState.ContainsWholeWord("checked"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CheckBox)untypedView;
            view.Css.BackgroundColor = "#b8b3fb";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "CheckBox > #CheckedImage")]
    [CssBody("width: 100%; height: 100%; background-image: url(Images/Icons/Check.png); background-size: contain; padding: 2px;")]
    class CheckBoxCheckedImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CheckedImage

            view = view.parent;

            if (view == null) return false;
            else if (!(view is CheckBox)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImageStretch = Stretch.Fit;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Padding(2);
            view.Css.BackgroundImagePath = "Images/Icons/Check.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "IconButton")]
    [CssBody("margin: 2px; height: 40px; padding: 5px;")]
    class IconButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: IconButton

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.Height = 40;
            view.Css.Padding(5);
            view.Css.Margin(2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "IconButton > #TextView")]
    [CssBody("text-align: center; height: 100%;")]
    class IconButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextView

            view = view.parent;

            if (view == null) return false;
            else if (!(view is IconButton)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "IconButton > #Icon")]
    [CssBody("height: 20px; background-position: left; background-size: contain; margin-top: 5px; margin-left: 5px;")]
    class IconButtonIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = view.parent;

            if (view == null) return false;
            else if (!(view is IconButton)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImageStretch = Stretch.Fit;
            view.Css.Height = 20;
            view.Css.Margin.Top = 5;
            view.Css.Margin.Left = 5;
            view.Css.BackgroundImageAlignment = Alignment.Left;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "SearchInput > #Icon")]
    [CssBody("background-image: url(Images/Icons/Search.png); opacity: 0.3; padding: 8px;")]
    class SearchInputIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = view.parent;

            if (view == null) return false;
            else if (!(view is SearchInput)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(8);
            view.Css.Opacity = 0.3f;
            view.Css.BackgroundImagePath = "Images/Icons/Search.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "SearchInput > #TextBox")]
    [CssBody("text-align: center;")]
    class SearchInputTextBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextBox

            view = view.parent;

            if (view == null) return false;
            else if (!(view is SearchInput)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "SearchInput > #CancelButton")]
    [CssBody("border: 0; height: 100%; left: 100%; white-space: nowrap; padding: 0; opacity: 0;")]
    class SearchInputCancelButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CancelButton

            view = view.parent;

            if (view == null) return false;
            else if (!(view is SearchInput)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Padding(0);
            view.Css.Border = 0;
            view.Css.X = 100.Percent();
            view.Css.WrapText = false;
            view.Css.Opacity = 0f;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "SearchInput:focus > #TextBox")]
    [CssBody("text-align: left; padding-left: 30px;")]
    class SearchInputFocusTextBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextBox

            view = view.parent;

            if (view == null) return false;
            else if (!(view is SearchInput && view.PseudoCssState.ContainsWholeWord("focus"))) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Left = 30;
            view.Css.TextAlignment = Alignment.Left;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "SearchInput:focus > #CancelButton")]
    [CssBody("opacity: 1;")]
    class SearchInputFocusCancelButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CancelButton

            view = view.parent;

            if (view == null) return false;
            else if (!(view is SearchInput && view.PseudoCssState.ContainsWholeWord("focus"))) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Opacity = 1f;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Switch")]
    [CssBody("width: 56px; height: 32px;")]
    class SwitchCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Switch

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Switch)untypedView;
            view.Css.Height = 32;
            view.Css.Width = 56;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Switch #Bar")]
    [CssBody("height: 32px; border-radius: 16px;")]
    class SwitchBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Bar

            view = CssEngine.FindParentByType<Switch>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 32;
            view.Css.Border.Radius = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Switch #Toggle")]
    [CssBody("height: 28px; width: 28px; border-radius: 14px; background: white; margin: 2px;")]
    class SwitchToggleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Toggle

            view = CssEngine.FindParentByType<Switch>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 28;
            view.Css.Width = 28;
            view.Css.Margin(2);
            view.Css.Border.Radius = 14;
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "FormField")]
    [CssBody("margin-top: 5px;")]
    class FormFieldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: FormField

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (FormField)untypedView;
            view.Css.Margin.Top = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "FormField > #Label")]
    [CssBody("width: 30%; height: 100%;")]
    class FormFieldLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = view.parent;

            if (view == null) return false;
            else if (!(view is FormField)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 30.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "FormField > #Icon")]
    [CssBody("width: 30%; width: 25px; height: 25px;")]
    class FormFieldIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = view.parent;

            if (view == null) return false;
            else if (!(view is FormField)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 25;
            view.Css.Width = 30.Percent();
            view.Css.Width = 25;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Dialog")]
    [CssBody("background: white; padding: 15px;")]
    class DialogCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Dialog

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Dialog)untypedView;
            view.Css.Padding(15);
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Dialog > #Title")]
    [CssBody("text-align: center; font-size: 16px; margin-bottom: 10px; font-weight: bold;")]
    class DialogTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = view.parent;

            if (view == null) return false;
            else if (!(view is Dialog)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 16;
            view.Css.Font.Bold = true;
            view.Css.Margin.Bottom = 10;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Dialog > #ButtonsRow")]
    [CssBody("margin-top: 30px;")]
    class DialogButtonsRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #ButtonsRow

            view = view.parent;

            if (view == null) return false;
            else if (!(view is Dialog)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 30;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Prompt #Description")]
    [CssBody("white-space: pre-wrap;")]
    class PromptDescriptionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Description

            view = CssEngine.FindParentByType<Prompt>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.WrapText = true;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Prompt #Input")]
    [CssBody("margin-top: 10px; margin-bottom: 10px;")]
    class PromptInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Input

            view = CssEngine.FindParentByType<Prompt>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;
            view.Css.Margin.Bottom = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "AlertDialog #Message")]
    [CssBody("text-align: center; margin-top: 10px;")]
    class AlertDialogMessageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Message

            view = CssEngine.FindParentByType<AlertDialog>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "PopUp")]
    [CssBody("width: 100%; height: 100%; padding: 0 20px;")]
    class PopUpCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: PopUp

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (PopUp)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Padding(vertical: 0, horizontal: 20);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "#PopupOverlay")]
    [CssBody("width: 100%; height: 100%; position: absolute; opacity: 0.35; background: black;")]
    class PopupOverlayCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #PopupOverlay

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Absolute = true;
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "#WaitingOverlay")]
    [CssBody("width: 100%; height: 100%; position: absolute; opacity: 0.35; background: black;")]
    class WaitingOverlayCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WaitingOverlay

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Absolute = true;
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "#WaitingOverlay")]
    [CssBody("opacity: 0.15;")]
    class WaitingOverlay_1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WaitingOverlay

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Opacity = 0.15f;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Toast")]
    [CssBody("background: black; border-radius: 7px; margin: 20px; padding: 20px;")]
    class ToastCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Toast

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Toast)untypedView;
            view.Css.Padding(20);
            view.Css.Margin(20);
            view.Css.BackgroundColor = Colors.Black;
            view.Css.Border.Radius = 7;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Toast #OKButton")]
    [CssBody("height: auto; width: 50px;")]
    class ToastOKButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #OKButton

            view = CssEngine.FindParentByType<Toast>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = null;
            view.Css.Width = 50;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Toast #Label")]
    [CssBody("color: #fff;")]
    class ToastLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Toast>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#fff";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Grid > #EmptyTextLabel")]
    [CssBody("text-align: center;")]
    class GridEmptyTextLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #EmptyTextLabel

            view = view.parent;

            if (view == null) return false;
            else if (!(view is Grid)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "ListView > #EmptyTextLabel")]
    [CssBody("text-align: center;")]
    class ListViewEmptyTextLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #EmptyTextLabel

            view = view.parent;

            if (view == null) return false;
            else if (!(view is ListView)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "ListViewItem")]
    [CssBody("border-top: 1px;")]
    class ListViewItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListViewItem

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ListViewItem)untypedView;
            view.Css.Border.Top = 1;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "ListView:lazy-loaded OptionsList-Option")]
    [CssBody("height: 30px;")]
    class ListViewLazyLoadedOptionsListOptionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: OptionsList-Option

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is ListView && view.PseudoCssState.ContainsWholeWord("lazy-loaded")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (OptionsList.Option)untypedView;
            view.Css.Height = 30;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "NavBarPage")]
    [CssBody("height: 100%; width: 100%;")]
    class NavBarPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: NavBarPage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (NavBarPage)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "NavBarPage #BodyScroller")]
    [CssBody("background: white; height: 100%; width: 100%;")]
    class NavBarPageBodyScrollerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #BodyScroller

            view = CssEngine.FindParentByType<NavBarPage>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "NavBarPage #BodyScroller > #Body")]
    [CssBody("padding: 10px;")]
    class NavBarPageBodyScrollerBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = view.parent;

            if (view == null) return false;
            else if (!(view.Id == "BodyScroller")) return false;

            view = CssEngine.FindParentByType<NavBarPage>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(10);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "NavigationBar")]
    [CssBody("height: 64px; padding: 10px;")]
    class NavigationBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: NavigationBar

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (NavigationBar)untypedView;
            view.Css.Height = 64;
            view.Css.Padding(10);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "NavigationBar > #Title")]
    [CssBody("font-size: 18px; font-weight: bold; text-align: center; width: 100%; height: 100%;")]
    class NavigationBarTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = view.parent;

            if (view == null) return false;
            else if (!(view is NavigationBar)) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Font.Size = 18;
            view.Css.Font.Bold = true;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", ".wait-spinner")]
    [CssBody("height: 60px; border-radius: 30px;")]
    class WaitSpinnerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .wait-spinner

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 60;
            view.Css.Border.Radius = 30;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", ".wait-spinner ImageView")]
    [CssBody("height: 100%;")]
    class WaitSpinnerImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            view = CssEngine.FindParentByCssClass(view, "wait-spinner");

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Height = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "#RefreshingIndicator")]
    [CssBody("width: 50px; height: 50px; background: url(Images/Icons/Spinner.png);")]
    class RefreshingIndicatorCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #RefreshingIndicator

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 50;
            view.Css.Width = 50;
            view.Css.BackgroundImagePath = "Images/Icons/Spinner.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Tabs")]
    [CssBody("background: #444444; height: 54px;")]
    class TabsCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Tabs

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Tabs)untypedView;
            view.Css.Height = 54;
            view.Css.BackgroundColor = "#444444";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Tabs Tabs-Tab")]
    [CssBody("padding-top: 9px; padding-bottom: 9px;")]
    class TabsTabsTabCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Tabs-Tab

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Tabs.Tab)untypedView;
            view.Css.Padding.Top = 9;
            view.Css.Padding.Bottom = 9;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Tabs Tabs-Tab #Icon")]
    [CssBody("background-position: center; height: 22px; width: 100%;")]
    class TabsTabsTabIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 22;
            view.Css.Width = 100.Percent();
            view.Css.BackgroundImageAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Tabs Tabs-Tab #Label")]
    [CssBody("font-size: 11px; color: #eeeeee; width: 100%; text-align: center;")]
    class TabsTabsTabLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 100.Percent();
            view.Css.Font.Size = 11;
            view.Css.TextColor = "#eeeeee";
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "DatePicker-Cell")]
    [CssBody("height: 50px; width: 100%;")]
    class DatePickerCellCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: DatePicker-Cell

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (DatePicker.Cell)untypedView;
            view.Css.Height = 50;
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "TimePicker-Cell")]
    [CssBody("height: 50px; width: 100%;")]
    class TimePickerCellCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TimePicker-Cell

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TimePicker.Cell)untypedView;
            view.Css.Height = 50;
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "DatePicker-Cell #Label")]
    [CssBody("height: 100%; width: 100%; text-align: center; font-size: 16px;")]
    class DatePickerCellLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<DatePicker.Cell>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Font.Size = 16;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "TimePicker-Cell #Label")]
    [CssBody("height: 100%; width: 100%; text-align: center; font-size: 16px;")]
    class TimePickerCellLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<TimePicker.Cell>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Font.Size = 16;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "DatePicker-Dialog #RotatorsRow")]
    [CssBody("margin-top: 15px;")]
    class DatePickerDialogRotatorsRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #RotatorsRow

            view = CssEngine.FindParentByType<DatePicker.Dialog>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "TimePicker-Dialog #RotatorsRow")]
    [CssBody("margin-top: 15px;")]
    class TimePickerDialogRotatorsRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #RotatorsRow

            view = CssEngine.FindParentByType<TimePicker.Dialog>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Picker")]
    [CssBody("padding: 7px; border: 1px solid #eee;")]
    class PickerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Picker

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Picker)untypedView;
            view.Css.Padding(7);
            view.Css.Border = new Border(1, "#eee");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Picker #Label")]
    [CssBody("height: 100%;")]
    class PickerLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Picker>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Picker #Caret")]
    [CssBody("background: url(Images/Icons/Caret.png); width: 20px;")]
    class PickerCaretCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Caret

            view = CssEngine.FindParentByType<Picker>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 20;
            view.Css.BackgroundImagePath = "Images/Icons/Caret.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Picker #PlaceholderLabel")]
    [CssBody("color: #ddd; height: 100%;")]
    class PickerPlaceholderLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #PlaceholderLabel

            view = CssEngine.FindParentByType<Picker>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.TextColor = "#ddd";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Spinner")]
    [CssBody("margin-left: calc(\"view.Width, view.Parent.Width, (vw, pw) => (pw - vw) / 2\");")]
    class SpinnerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Spinner

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Spinner)untypedView;
            view.Css.Margin.Left = new Length.BindingLengthRequest(view.Width, view.Parent.Width, (vw, pw) => (pw - vw) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Spinner > ImageView")]
    [CssBody("margin: 0;")]
    class SpinnerImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            view = view.parent;

            if (view == null) return false;
            else if (!(view is Spinner)) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Margin(0);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Spinner.small")]
    [CssBody("background-color: #fff; width: 60px; height: 60px; border-radius: 50px;")]
    class SpinnerSmallCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Spinner && HasClass(view, "small"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Spinner)untypedView;
            view.Css.Height = 60;
            view.Css.Width = 60;
            view.Css.BackgroundColor = "#fff";
            view.Css.Border.Radius = 50;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "ActionButton")]
    [CssBody("height: 56px;")]
    class ActionButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ActionButton

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ActionButton)untypedView;
            view.Css.Height = 56;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "ActionButton Column")]
    [CssBody("padding: 10px;")]
    class ActionButtonColumnCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Column

            view = CssEngine.FindParentByType<ActionButton>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Column)untypedView;
            view.Css.Padding(10);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "ActionButton TextView.primary")]
    [CssBody("font-size: 18px; color: #6358db;")]
    class ActionButtonTextViewPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "primary"))) return false;

            view = CssEngine.FindParentByType<ActionButton>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Size = 18;
            view.Css.TextColor = "#6358db";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "ActionButton TextView.secondary")]
    [CssBody("font-size: 14px;")]
    class ActionButtonTextViewSecondaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "secondary"))) return false;

            view = CssEngine.FindParentByType<ActionButton>(view);

            if (view == null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Size = 14;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", ".primary-bg")]
    [CssBody("background-color: #b8b3fb;")]
    class PrimaryBgCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .primary-bg

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#b8b3fb";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", ".m-big")]
    [CssBody("margin: 50px;")]
    class MBigCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .m-big

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(50);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", ".m-t-big")]
    [CssBody("margin-top: 50px;")]
    class MTBigCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .m-t-big

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 50;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", ".m-b-normal")]
    [CssBody("margin-bottom: 15px;")]
    class MBNormalCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .m-b-normal

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Bottom = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", ".m-b-big")]
    [CssBody("margin-bottom: 25px;")]
    class MBBigCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .m-b-big

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Bottom = 25;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", ".parent-center")]
    [CssBody("margin-left: calc(\"view.Width, view.Parent.Width, (vw, pw) => (pw - vw) / 2\");")]
    class ParentCenterCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .parent-center

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Left = new Length.BindingLengthRequest(view.Width, view.Parent.Width, (vw, pw) => (pw - vw) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", ".muted")]
    [CssBody("color: #7d7d7d;")]
    class MutedCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .muted

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#7d7d7d";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "ImageView.logo")]
    [CssBody("width: 150px; height: 150px;")]
    class ImageViewLogoCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is ImageView && HasClass(view, "logo"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Height = 150;
            view.Css.Width = 150;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "TextView.title")]
    [CssBody("color: #6358db; font-weight: bold; font-size: 22px; text-align: center;")]
    class TextViewTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "title"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 22;
            view.Css.TextColor = "#6358db";
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "TextView.sub-title")]
    [CssBody("font-size: 18px;")]
    class TextViewSubTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "sub-title"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Size = 18;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "TextView.separator")]
    [CssBody("margin-bottom: 20px; margin-bottom: 20px; border-bottom: solid 1px #f0f0f0;")]
    class TextViewSeparatorCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "separator"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Margin.Bottom = 20;
            view.Css.Margin.Bottom = 20;
            view.Css.Border = new Border{ Bottom = 1, Color = "#f0f0f0"};

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Stack.input-wrapper")]
    [CssBody("padding: 2px; padding-bottom: 1px; background-color: #fff; border-radius: 20px;")]
    class StackInputWrapperCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Stack && HasClass(view, "input-wrapper"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Stack)untypedView;
            view.Css.Padding(2);
            view.Css.Padding.Bottom = 1;
            view.Css.BackgroundColor = "#fff";
            view.Css.Border.Radius = 20;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Button.lg")]
    [CssBody("padding: 20px; font-size: 18px; font-weight: bold;")]
    class ButtonLgCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Button && HasClass(view, "lg"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Font.Size = 18;
            view.Css.Font.Bold = true;
            view.Css.Padding(20);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "Button.primary")]
    [CssBody("background-color: #6358db; color: #f0f0f0;")]
    class ButtonPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Button && HasClass(view, "primary"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.BackgroundColor = "#6358db";
            view.Css.TextColor = "#f0f0f0";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "ActionButton.primary")]
    [CssBody("background-color: #6358db;")]
    class ActionButtonPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is ActionButton && HasClass(view, "primary"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ActionButton)untypedView;
            view.Css.BackgroundColor = "#6358db";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "ActionButton.primary TextView.primary")]
    [CssBody("color: #f0f0f0;")]
    class ActionButtonPrimaryTextViewPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "primary"))) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is ActionButton && HasClass(view, "primary")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.TextColor = "#f0f0f0";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles\\Common.css", "ActionButton.primary TextView.secondary")]
    [CssBody("color: #b1aced;")]
    class ActionButtonPrimaryTextViewSecondaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "secondary"))) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is ActionButton && HasClass(view, "primary")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.TextColor = "#b1aced";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.IOS
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.IOS, "Styles\\iOS.css", "TextInput")]
    [CssBody("font-family: Arial;")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Font.Name = "Arial";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.IOS
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.IOS, "Styles\\iOS.css", "TextView")]
    [CssBody("font-family: Arial;")]
    class TextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Arial";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.IOS
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.IOS, "Styles\\iOS.css", ".module-header-title")]
    [CssBody("font-size: 24px; font-weight: bold;")]
    class ModuleHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .module-header-title

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 24;
            view.Css.Font.Bold = true;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.IOS
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.IOS, "Styles\\iOS.css", "Dialog")]
    [CssBody("border-radius: 15px;")]
    class DialogCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Dialog

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Dialog)untypedView;
            view.Css.Border.Radius = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.IOS
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.IOS, "Styles\\iOS.css", ".primary-button")]
    [CssBody("border-radius: 5px;")]
    class PrimaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .primary-button

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Border.Radius = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Windows
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Windows, "Styles\\Windows.css", "TextView")]
    [CssBody("font-family: \"Segoe UI\";")]
    class TextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Segoe UI";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Windows
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Windows, "Styles\\Windows.css", "TextInput")]
    [CssBody("font-family: \"Segoe UI\";")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Font.Name = "Segoe UI";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Windows
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Windows, "Styles\\Windows.css", ".module-header-title")]
    [CssBody("font-size: 40px;")]
    class ModuleHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .module-header-title

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 40;

            return Task.CompletedTask;
        }
    }
}